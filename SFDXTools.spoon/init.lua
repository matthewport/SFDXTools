local obj = {}

--- === SFDXTools ===
---
--- A number of tools for use with the Salesforce CLI

-- Metadata
obj.name = "SFDXTools"
obj.version = "1.0.4"
obj.author = "Matt Port <mattp0@duck.com>"
obj.homepage = "https://github.com/mattp0805/SFDXTools"
obj.license = "MIT - https://opensource.org/licenses/MIT"

--- SFDXTools.MAPPING
--- Variable
--- A table containing a the modifier and hotkey for launching the startDialog function.
--- Default = {{ "cmd", "alt", "ctrl" }, "s"}

obj.MAPPING = {{ "cmd", "alt", "ctrl" }, "s"}

--- SFDXTools.SFDXPATH
--- Variable
--- A string to the SFDX CLI binary.
--- Default = "/usr/local/bin/sfdx"

obj.SFDXPATH = "/usr/local/bin/sfdx"

--- SFDXTools.ALERTSTYLE
--- Variable
--- A table defining the default visual style for the alerts generated by the 'hs.alert' module.
--- See https://github.com/Hammerspoon/hammerspoon/blob/master/extensions/alert/alert.lua#L17 for styling

obj.ALERTSTYLE = {
    strokeWidth  = 2,
    strokeColor = { white = 1, alpha = 1 },
    fillColor   = { white = 0, alpha = 0.75 },
    textColor = { white = 1, alpha = 1 },
    textFont  = ".AppleSystemUIFont",
    textSize  = 14,
    radius = 27,
    atScreenEdge = 1,
    fadeInDuration = 0.15,
    fadeOutDuration = 0.15,
    padding = nil,
}

--- SFDXTools.ORGLISTDURATION
--- Variable
--- An integer defining the duration for which the list shown by startDialog shows on screen, in seconds. 
obj.ORGLISTDURATION = 6



function obj:init()
    w = {}
    self.__index = self
    return setmetatable(w , self )
end

local function writeLine(name)
    local newLine = name .. " \t\t\t\t\t\t\t " .. org.connectedStatus .. "\n"  
    return newLine

local function sfdxList(exitCode, stdOut, stdErr)
        if exitCode == 0 then
            jsonResponse = hs.json.decode(stdOut)
            nonScratchOrgs = {}
            scratchOrgs = {}
            alertString = "Non-Scratch Orgs \n"
            for i, org in ipairs(jsonResponse.result.nonScratchOrgs) do
                if org.alias == nil then
                    alertString = alertString .. writeLine(org.username)
                else 
                    alertString = alertString .. writeLine(org.alias)
            end
--[[            for i, org in ipairs(jsonResponse.result.scratchOrgs) do
                for k, v in pairs(org) do
                    scratchOrgs[k] = v
                end
            end
]]--
            print(alertString)
            --hs.alert.show(alertString, obj.ALERTSTYLE, hs.screen.mainScreen(), obj.ORGLISTDURATION )    
                
        else
            hs.alert.show('Error: Ex' .. stdErr)
        end 
        
end

local function sfdxOpen(exitCode, stdOut, stdErr)
    if exitCode == 0 then
       console.log('Opened org')
    else
        -- hs.alert.show('Error: ' .. stdErr)
    end 
    
end



local function startDialog()
    hs.focus()
    button, text = hs.dialog.textPrompt("SFDX", "Enter org to open", "list", "Open", "Cancel", false)
    if button == 'Open' then
        if text == 'list' then

            print(text)
            print(button)
                
                t = hs.task.new(obj.SFDXPATH, sfdxList, {'force:org:list', '--json'})
                t:start()    
        else
                
                t = hs.task.new(obj.SFDXPATH, sfdxOpen, {'force:org:open', text})
                t:start()
            
        end
    end
end

--- SFDXTools:bindHotkeys()
--- Method
--- Binds hotkeys in MAPPING variable to the startDialog function.

function obj:bindHotKeys()
    spec = obj.MAPPING[1]
    key = obj.MAPPING[2]
    if hs.hotkey.assignable(spec,key) == true then
        hs.hotkey.bind(spec, key, function()
            startDialog()
        end)
        else 
        print("Could not bind keys, try a different combination")
    end
end 


return obj
